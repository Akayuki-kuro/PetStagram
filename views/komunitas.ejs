<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8">
  <title>Komunitas | Petstagram</title>
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="/css/chat.css">
  <link rel="stylesheet" href="/css/komunitas.css">
</head>
<body>
  <header class="main-header">
    <h1><a href="/" style="text-decoration: none; color: white;">Petstagram</a></h1>
    <nav class="main-nav">
      <a href="/">Home</a>
      <a href="/posts/new">Buat Postingan</a>
      <a href="/profile">Profil</a>
      <a href="/auth/logout">Logout</a>
    </nav>
  </header>

  <div class="chat-container">
    <div class="chat-header">
      <h2>Komunitas Pecinta hewan üêæ</h2>
      <p>Diskusi bersama pecinta hewan lainnya</p>
    </div>

    <div class="chat-online-users">
      <h3>Online Users (<span id="online-count">0</span>)</h3>
      <div id="online-users-list"></div>
    </div>

    <div id="chat-box" class="chat-box">
      <% messages.forEach(msg => { %>
        <div class="chat-message <%= msg.user.id.toString() === user._id.toString() ? 'own-message' : '' %>" data-message-id="<%= msg._id %>">
          <div class="message-avatar">
            <img src="<%= msg.user.photo %>" alt="<%= msg.user.username %>" class="avatar" />
            <span class="username"><%= msg.user.username %></span>
          </div>
          <div class="message-bubble">
            <% if (msg.user.id.toString() === user._id.toString()) { %>
              <div class="message-actions">
                <button class="delete-msg-btn" data-message-id="<%= msg._id %>">Delete</button>
              </div>
            <% } %>
            <p><%= msg.message %></p>
            <span class="message-time"><%= new Date(msg.createdAt).toLocaleString() %></span>
          </div>
        </div>
      <% }) %>
    </div>
    
    <div id="typing-indicator" class="typing-indicator">
      Someone is typing...
    </div>

    <form id="chat-form" class="chat-form">
      <input 
        type="text" 
        id="chat-input" 
        placeholder="Ketik pesan Anda..." 
        autocomplete="off" 
        required
      />
      <button type="submit">Send</button>
    </form>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    console.log('Komunitas script loaded.'); // Log script load
    
    const socket = io();
    const chatBox = document.getElementById('chat-box');
    const chatForm = document.getElementById('chat-form');
    const chatInput = document.getElementById('chat-input');
    const onlineUsersList = document.getElementById('online-users-list');
    const typingIndicator = document.getElementById('typing-indicator');
    
    let typingTimeout = null;
    let isTyping = false;

    // Format date to readable format
    const formatTime = (date) => {
      const d = new Date(date);
      return d.toLocaleString('id-ID', {
        hour: '2-digit',
        minute: '2-digit',
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
      });
    };

    // Keep chat scrolled to bottom
    const scrollToBottom = () => {
      chatBox.scrollTop = chatBox.scrollHeight;
    };

    scrollToBottom();

    // Current user data
    const user = {
      id: "<%= user._id %>",
      username: "<%= user.username %>",
      photo: "<%= user.photo %>"
    };
    console.log('Current user data:', user); // Log user data

    // Socket Connection Event
    socket.on('connect', () => {
      console.log('Socket connected successfully! ID:', socket.id);
      // Connect to socket
      socket.emit('user connected', user);
    });
    
    socket.on('disconnect', (reason) => {
      console.log('Socket disconnected:', reason);
    });

    // Update online users list with count
    socket.on('active users', (users) => {
      const count = users.length;
      document.getElementById('online-count').textContent = count;
      
      onlineUsersList.innerHTML = users.map(user => `
        <div class="online-user">
          <img src="${user.photo}" alt="${user.username}" class="avatar-small" />
          <span>${user.username}</span>
        </div>
      `).join('');
    });

    // Handle incoming messages
    socket.on('chat message', (msg) => {
      console.log('Received chat message:', msg); // Log incoming message
      const isOwnMessage = msg.user.id === user.id;
      const msgDiv = document.createElement('div');
      msgDiv.classList.add('chat-message');
      msgDiv.dataset.messageId = msg._id || '';
      if (isOwnMessage) msgDiv.classList.add('own-message');
      
      const messageContent = msg.message || msg.text; // Handle both formats
      
      const deleteAction = isOwnMessage ? 
        `<div class="message-actions">
          <button onclick="deleteMessage('${msg._id || ''}')" class="delete-msg-btn">Delete</button>
        </div>` : '';
        
      msgDiv.innerHTML = `
        <div class="message-avatar">
          <img src="${msg.user.photo}" alt="${msg.user.username}" class="avatar" />
          <span class="username">${msg.user.username}</span>
        </div>
        <div class="message-bubble">
          ${deleteAction}
          <p>${messageContent}</p>
          <span class="message-time">${formatTime(msg.createdAt)}</span>
        </div>
      `;
      
      chatBox.appendChild(msgDiv);
      scrollToBottom();
      
      // Clear typing indicator when message is received
      if (msg.user.id === user.id) {
        socket.emit('user stopped typing', user);
      }
    });
    
    // Typing indicator listeners
    socket.on('user typing', (typingUser) => {
      if (typingUser.id !== user.id) {
        typingIndicator.textContent = `${typingUser.username} is typing...`;
        typingIndicator.style.display = 'block';
      }
    });
    
    socket.on('user stopped typing', () => {
      typingIndicator.style.display = 'none';
    });
    
    // Error handling
    socket.on('error', (error) => {
      console.error('Socket error received:', error);
      alert('An error occurred: ' + error.message);
    });
    
    socket.on('connect_error', (err) => {
      console.error('Socket connection error:', err.message, err.description, err.context);
    });

    // Handle typing event
    chatInput.addEventListener('input', () => {
      if (!isTyping) {
        isTyping = true;
        socket.emit('user typing', user);
      }
      
      // Clear previous timeout
      clearTimeout(typingTimeout);
      
      // Set new timeout
      typingTimeout = setTimeout(() => {
        isTyping = false;
        socket.emit('user stopped typing', user);
      }, 1000);
    });

    // Handle form submission
    chatForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      console.log('Chat form submitted.'); // Log form submission
      const text = chatInput.value.trim();
      
      if (text) {
        try {
          // Clear typing indicator
          clearTimeout(typingTimeout);
          isTyping = false;
          socket.emit('user stopped typing', user);
          
          const messageData = {
            text: text,
            user: user
          };
          console.log('Attempting to emit send message:', messageData); // Log emit attempt
          
          // Emit message directly to socket.io for immediate feedback
          socket.emit('send message', messageData);
          
          // Clear input field immediately
          chatInput.value = '';
          chatInput.focus();
          console.log('Message emitted and input cleared.'); // Log success
          
        } catch (err) {
          console.error('Error in form submission handler:', err);
          alert('Failed to send message. Please try again.');
        }
      }
    });

    // Add event delegation for delete buttons
    chatBox.addEventListener('click', async (e) => {
      if (e.target.classList.contains('delete-msg-btn')) {
        const messageId = e.target.dataset.messageId;
        if (messageId && confirm('Are you sure you want to delete this message?')) {
          try {
            const response = await fetch(`/komunitas/messages/${messageId}`, {
              method: 'DELETE'
            });

            if (response.ok) {
              const msgElement = document.querySelector(`[data-message-id="${messageId}"]`);
              if (msgElement) {
                msgElement.remove();
                socket.emit('message deleted', messageId);
              }
            } else {
              const error = await response.json();
              alert(`Failed to delete message: ${error.error || 'Unknown error'}`);
            }
          } catch (err) {
            console.error('Error deleting message:', err);
            alert('Failed to delete message. Please try again.');
          }
        }
      }
    });

    // Handle message deletion broadcast
    socket.on('message deleted', (messageId) => {
      const msgElement = document.querySelector(`[data-message-id="${messageId}"]`);
      if (msgElement) msgElement.remove();
    });
  </script>

  <footer class="main-footer">
    <p>&copy; 2025 Petstagram - All Rights Reserved</p>
  </footer>
</body>
</html>
